package com.bolsadeideas.springboot.backend.apirest.controllers;

import java.io.Console;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.dao.DataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.bolsadeideas.springboot.backend.apirest.models.entity.ChangePassword;
import com.bolsadeideas.springboot.backend.apirest.models.entity.Cliente;
import com.bolsadeideas.springboot.backend.apirest.models.entity.Region;
import com.bolsadeideas.springboot.backend.apirest.models.entity.Role;
import com.bolsadeideas.springboot.backend.apirest.models.entity.Usuario;
import com.bolsadeideas.springboot.backend.apirest.models.services.EmailServiceImpl;
import com.bolsadeideas.springboot.backend.apirest.models.services.IClienteService;
import com.bolsadeideas.springboot.backend.apirest.models.services.IUploadFileService;
import com.bolsadeideas.springboot.backend.apirest.models.services.IUsuarioService;

@CrossOrigin(origins = { "http://localhost:4200", "*" })
@RestController
@RequestMapping("/api")
public class ClienteRestController {

	@Autowired
	private IClienteService clienteService;

	@Autowired
	private IUploadFileService uploadService;

	@Autowired
	private IUsuarioService usuarioService;

	@Autowired
	private BCryptPasswordEncoder passwordEncoder;

	@Autowired
	private EmailServiceImpl emailService;

	// private final Logger log =
	// LoggerFactory.getLogger(ClienteRestController.class);

	@GetMapping("/clientes")
	public List<Cliente> index() {
		return clienteService.findAll();
	}

	@GetMapping("/clientes/page/{page}")
	public Page<Cliente> index(@PathVariable Integer page) {
		Pageable pageable = PageRequest.of(page, 4);
		return clienteService.findAll(pageable);
	}

	/**
	 * Show a Client from BBDD by Id
	 * 
	 * @param id
	 * @return
	 **/
	@Secured({ "ROLE_ADMIN", "ROLE_USER" })
	@GetMapping("/clientes/{id}")
	@ResponseStatus(HttpStatus.OK)
	public ResponseEntity<?> show(@PathVariable Long id) {
		Cliente cliente = null;
		Map<String, Object> response = new HashMap<>();

		try {
			cliente = clienteService.findById(id);
		} catch (DataAccessException e) {

			response.put("mensaje", "Error al realizar la consulta en la Base de Datos!");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		if (cliente == null) {
			response.put("mensaje", "El clienta ID: ".concat(id.toString().concat(" no existe en la Base de Datos!")));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Cliente>(cliente, HttpStatus.OK);
	}

	/**
	 * Create a Client on BBDD
	 * 
	 * @param cliente
	 * 
	 * @return
	 **/
	@Secured({ "ROLE_ADMIN" })
	@PostMapping("/clientes")
	@ResponseStatus(HttpStatus.CREATED)
	public ResponseEntity<?> create(@Valid @RequestBody Cliente cliente, BindingResult result) {
		Cliente clientenew = null;
		Map<String, Object> response = new HashMap<>();
		if (result.hasErrors()) {
			/*
			 * List<String> errors =new ArrayList<>(); for(FieldError err
			 * :result.getFieldErrors()) { errors.add("El campo '"+err.getField() +"' "+
			 * err.getDefaultMessage()); }
			 */
			List<String> errors = result.getFieldErrors().stream()
					.map(err -> "El campo '" + err.getField() + "' " + err.getDefaultMessage())
					.collect(Collectors.toList());

			response.put("errors", errors);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.BAD_REQUEST);
		}

		try {
			clientenew = clienteService.save(cliente);
		} catch (DataAccessException e) {
			response.put("mensaje", "Error al realizar la insercion en la Base de Datos!");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}

		response.put("mensaje", "Cliente a√±adido correctamente en la Base de Datos!");
		response.put("cliente", clientenew);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	/**
	 * Update a Client into BBDD by id
	 * 
	 * @param cliente
	 * 
	 * @param id
	 * 
	 * @return
	 */
	@Secured({ "ROLE_ADMIN" })
	@PutMapping("/clientes/{id}")
	@ResponseStatus(HttpStatus.CREATED)
	public ResponseEntity<?> update(@Valid @RequestBody Cliente cliente, @PathVariable Long id, BindingResult result) {
		Cliente clienteActual = clienteService.findById(id);
		Cliente clienteUpdated = null;
		Map<String, Object> response = new HashMap<>();

		if (result.hasErrors()) {
			List<String> errors = result.getFieldErrors().stream()
					.map(err -> "El campo '" + err.getField() + "' " + err.getDefaultMessage())
					.collect(Collectors.toList());

			response.put("errors", errors);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.BAD_REQUEST);
		}

		if (Objects.isNull(clienteActual)) {
			response.put("mensaje", "Error: no se pudo actualizar. El clienta ID: "
					.concat(id.toString().concat(" no existe en la Base de Datos!")));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}

		try {

			clienteActual.setApellidos(cliente.getApellidos());
			clienteActual.setNombre(cliente.getNombre());
			clienteActual.setEmail(cliente.getEmail());
			clienteActual.setCreateAt(cliente.getCreateAt());
			clienteActual.setRegion(cliente.getRegion());

			clienteUpdated = clienteService.save(clienteActual);

		} catch (DataAccessException e) {
			response.put("mensaje", "Error al realizar el update en la Base de Datos!");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}

		response.put("mensaje", "Cliente actualizado correctamente en la Base de Datos!");
		response.put("cliente", clienteUpdated);
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	/**
	 * Delete a Client into BBDD by id
	 * 
	 * @param id
	 */
	@Secured({ "ROLE_ADMIN" })
	@DeleteMapping("/clientes/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public ResponseEntity<?> delete(@PathVariable Long id) {

		Map<String, Object> response = new HashMap<>();

		try {

			Cliente cliente = clienteService.findById(id);
			String nombreFotoAnterior = cliente.getFoto();

			uploadService.eliminar(nombreFotoAnterior);

			clienteService.delete(id);

		} catch (DataAccessException e) {
			response.put("mensaje", "Error al realizar el delete en la Base de Datos!");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		response.put("mensaje", "Cliente eliminado correctamente en la Base de Datos!");
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@Secured({ "ROLE_ADMIN", "ROLE_USER" })
	@PostMapping("/clientes/upload")
	public ResponseEntity<?> upload(@RequestParam("archivo") MultipartFile archivo, @RequestParam("id") Long id) {

		Map<String, Object> response = new HashMap<>();

		Cliente cliente = clienteService.findById(id);
		String nombreArchivo = null;
		if (!archivo.isEmpty()) {
			try {
				nombreArchivo = uploadService.copiar(archivo);
			} catch (IOException e) {
				response.put("mensaje", "Error al subir imagen en la Base de Datos!");
				response.put("error", e.getMessage().concat(": ").concat(e.getCause().getMessage()));
				return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			}

			String nombreFotoAnterior = cliente.getFoto();
			uploadService.eliminar(nombreFotoAnterior);

			cliente.setFoto(nombreArchivo);

			clienteService.save(cliente);

			response.put("cliente", cliente);
			response.put("mensaje", "has subido correctamente la imagen" + nombreArchivo);
		}

		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.CREATED);
	}

	@GetMapping("/uploads/img/{nombreFoto:.+}")
	public ResponseEntity<Resource> verFoto(@PathVariable String nombreFoto) {
		Resource recurso = null;
		try {
			recurso = uploadService.cargar(nombreFoto);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}
		HttpHeaders cabecera = new HttpHeaders();
		cabecera.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + recurso.getFilename() + "\"");

		return new ResponseEntity<Resource>(recurso, cabecera, HttpStatus.OK);

	}

	@Secured({ "ROLE_ADMIN" })
	@GetMapping("/clientes/regiones")
	public List<Region> listarRegiones() {
		return clienteService.findAllRegiones();
	}

	/* Usuarios */

	/***
	 * 
	 * @return List of Usuarios
	 */
	@GetMapping("/usuarios")
	public List<Usuario> showUsuarios() {
		return usuarioService.findAll();
	}

	/***
	 * Get Usuarios Pageable
	 * 
	 * @param page
	 * @return Pageable of Usuarios
	 */
	@GetMapping("/usuarios/page/{page}")
	public Page<Usuario> showUsuariosPage(@PathVariable Integer page) {
		Pageable pageable = PageRequest.of(page, 4);
		return usuarioService.findAll(pageable);
	}

	/**
	 * Create a new Usuario
	 * 
	 * @param usuario
	 * @param result
	 * @return Response Entity of Usuario
	 */
	@Secured({ "ROLE_ADMIN" })
	@PostMapping("/usuarios")
	@ResponseStatus(HttpStatus.CREATED)
	public ResponseEntity<?> createUsuario(@Valid @RequestBody Usuario usuario, BindingResult result) {
		Usuario usuarionew = null;
		Usuario userCheck = null;
		Map<String, Object> response = new HashMap<>();

		if (result.hasErrors()) {
			List<String> errors = result.getFieldErrors().stream()
					.map(err -> "El campo '" + err.getField() + "' " + err.getDefaultMessage())
					.collect(Collectors.toList());

			response.put("errors", errors);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.BAD_REQUEST);
		}
		userCheck = usuarioService.findByUsername(usuario.getUsername());
		if (Objects.isNull(userCheck)) {
			if (usuario.getPassword().isEmpty() || usuario.getPassword() == null
					|| usuario.getPassword().equals("vacio")) {
				usuario.setPassword("12345");
			}
			if (usuario.getRoles().isEmpty() || Objects.isNull(usuario.getRoles())) {
				List<Role> roles = new ArrayList<Role>();
				Role rol = new Role();
				rol.setId((long) 1);
				rol.setUsername("ROLE_USER");
				roles.add(rol);
				usuario.setRoles(roles);
			}
			try {
				emailService.sendSimpleMessage(usuario.getEmail(), "Administracion Contacta",
						"Esta es su pass: " + usuario.getPassword());
				usuario.setPassword(passwordEncoder.encode(usuario.getPassword()));
				usuarionew = usuarioService.save(usuario);
				/*
				 * for(Role r : usuario.getRoles()) { usuarioService.saveRole(usuario, r); }
				 */
			} catch (DataAccessException e) {
				response.put("mensaje", "Error al realizar la insercion en la Base de Datos!");
				response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
				return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
			}

			response.put("mensaje", "Usuario a√±adido correctamente en la Base de Datos!");
			response.put("usuario", usuarionew);
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
		} else {
			response.put("mensaje", "Error al realizar la insercion en la Base de Datos!");
			response.put("error", "Username repetido en la BBDD");
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@Secured({ "ROLE_ADMIN" })
	@GetMapping("/usuarios/roles")
	List<Role> showRole() {
		return usuarioService.showRole();

	}

	@Secured({ "ROLE_ADMIN" })
	@DeleteMapping("/usuarios/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public ResponseEntity<?> deleteUsuario(@PathVariable Long id) {
		Map<String, Object> response = new HashMap<>();
		try {
			usuarioService.deleteById(id);
		} catch (DataAccessException e) {
			response.put("mensaje", "Error al realizar el delete en la Base de Datos!");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		response.put("mensaje", "Usuario eliminado correctamente en la Base de Datos!");
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);
	}

	@PostMapping("/password/{username}")
	@ResponseStatus(HttpStatus.CREATED)
	public ResponseEntity<?> changePassword(@Valid @RequestBody ChangePassword passwords, @PathVariable String username,
			BindingResult result) {
		Usuario usuarioActual = usuarioService.findByUsername(username);
		Map<String, Object> response = new HashMap<>();
		if (Objects.isNull(usuarioActual)) {
			response.put("mensaje", "Error: no se pudo actualizar. El Username: "
					.concat(username.concat(" no existe en la Base de Datos!")));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}
		if (usuarioActual.getPassword().equals(passwords.getOldPassword())
				|| usuarioActual.getPassword().equals(passwords.getNewPassword())) {
			System.out.println("Contrase√±as NO SON iguales:");
			System.out.println("USER-OldPassword: " + usuarioActual.getPassword());
			System.out.println("WEB-OldPassword: " + passwords.getOldPassword());
			System.out.println("WEB-NewPassword: " + passwords.getNewPassword());
			response.put("mensaje", "Error: no se pudo actualizar. Las contrase√±as son iguales: ");
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.NOT_FOUND);
		}

		try {
			usuarioActual.setPassword(passwords.getNewPassword());
			usuarioService.save(usuarioActual);
		} catch (DataAccessException e) {
			response.put("mensaje", "Error al realizar el cambio de Password en la Base de Datos!");
			response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		response.put("mensaje", "Password actualizada correctamente en la Base de Datos!");
		return new ResponseEntity<Map<String, Object>>(response, HttpStatus.OK);

	}

}

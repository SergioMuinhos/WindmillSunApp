package com.bolsadeideas.springboot.backend.apirest;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeIn;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.security.SecurityScheme;

@SpringBootApplication
@OpenAPIDefinition(info = @Info(title = "Administracion API", version = "2.0", description = "Administracion Information"))
@SecurityScheme(name = "javainuseapi", scheme = "basic", type = SecuritySchemeType.HTTP, in = SecuritySchemeIn.HEADER)
public class SpringBootBackendApirestApplication implements CommandLineRunner{
	
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;

	public static void main(String[] args) {
		SpringApplication.run(SpringBootBackendApirestApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		String password="12345";
		
		for (int i = 0; i < 4; i++) {
			String passwordBcrypt=passwordEncoder.encode(password);
			System.out.println(passwordBcrypt);
			
		}
		
	}
	/*
	 * @Bean public OpenAPI customOpenAPI(@Value("1.0") String appVersion) { return
	 * new OpenAPI() .components(new Components()) .info(new
	 * Info().title("Empleados API").version(appVersion) .license(new
	 * License().name("Apache 2.0").url("http://springdoc.org"))); }
	 */

}
